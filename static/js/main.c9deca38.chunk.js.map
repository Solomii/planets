{"version":3,"sources":["constants/ActionTypes.js","reducers/planets.js","reducers/index.js","actions/planets.js","api/planets.js","components/Planets.js","containers/PlanetsContainer.js","components/App/App.js","index.js"],"names":["GET_PLANETS_REQUEST","GET_PLANETS_SUCCESS","GET_PLANETS_FAIL","initialState","plan","isLoading","error","data","planets","state","action","type","payload","combineReducers","getPlanet","dispatch","a","fetch","response","json","res","getPlanetFunc","Planets","b","getPlanets","bodies","map","i","name","id","useParams","console","log","onClick","connect","App","className","middleware","thunk","store","createStore","reducer","applyMiddleware","render","document","getElementById"],"mappings":"8OAAaA,EAAsB,oBACtBC,EAAsB,oBACtBC,EAAmB,iBCI1BC,EAAe,CACnBC,KAAM,CACJC,UAAW,KACXC,MAAO,KACPC,KAAM,OAsCKC,EAlCC,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAChD,OAAQA,EAAOC,MACb,KAAKX,EACH,OAAO,2BACFS,GADL,IAEEL,KAAM,CACJC,WAAW,EACXC,MAAO,KACPC,KAAM,QAGZ,KAAKN,EACH,OAAO,2BACFQ,GADL,IAEEL,KAAM,CACJC,WAAW,EACXC,OAAO,EACPC,KAAMG,EAAOE,WAGnB,KAAKV,EACH,OAAO,2BACFO,GADL,IAEEL,KAAM,CACJC,WAAW,EACXC,MAAOI,EAAOE,QACdL,MAAM,KAGZ,QACE,OAAOE,ICzCEI,cAAgB,CAC7BL,Y,iCCIIM,EAAS,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAChBD,EAAS,CAAEJ,KAAMX,IADD,kBCPhBiB,MAAM,mDDOU,cAIRC,EAJQ,gBAKIA,EAASC,OALb,OAKRC,EALQ,OAMdL,EAAS,CAAEJ,KAAMV,EAAqBW,QAASQ,IANjC,kDAQdL,EAAS,CAAEJ,KAAMT,EAAkBU,QAAQ,EAAD,KAR5B,0DAAH,sDAYFS,EAAgB,SAACN,GAC5B,OAAO,kBAAMD,EAAUC,K,OEDVO,EAjBC,SAAC,GAA6B,IACxCC,EADaf,EAA0B,EAA1BA,QAASgB,EAAiB,EAAjBA,WAGxBD,EADEf,EAAQJ,MAAQI,EAAQJ,KAAKG,MAAQC,EAAQJ,KAAKG,KAAKkB,OACrDjB,EAAQJ,KAAKG,KAAKkB,OAAOC,KAAI,SAACC,GAAD,OAAO,6BAAMA,EAAEC,SAE5C,wCALqC,IAOrCC,EAAOC,cAAPD,GAEN,OADAE,QAAQC,IAAIH,GAEV,6BACE,uCACA,4BAAQI,QAAST,GAAjB,WACCD,ICGQW,eATS,SAACzB,GAAD,MAAY,CAClCD,QAASC,EAAMD,YAGU,SAACO,GAC1B,MAAO,CACLS,WAAYH,EAAcN,MAGfmB,EAbU,SAAC,GAAD,IAAG1B,EAAH,EAAGA,QAASgB,EAAZ,EAAYA,WAAZ,OACvB,kBAAC,EAAD,CAAShB,QAASA,EAASgB,WAAYA,OCK1BW,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,Q,gBCKAC,EAAa,CAACC,KAKpB,IAAMC,EAAQC,YAAYC,EAASC,IAAe,WAAf,EAAmBL,IAItDM,iBACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.c9deca38.chunk.js","sourcesContent":["export const GET_PLANETS_REQUEST = \"getplanetsrequest\";\r\nexport const GET_PLANETS_SUCCESS = \"getplanetssuccess\";\r\nexport const GET_PLANETS_FAIL = \"getplanetsfail\";\r\n","import {\r\n  GET_PLANETS_REQUEST,\r\n  GET_PLANETS_SUCCESS,\r\n  GET_PLANETS_FAIL,\r\n} from \"../constants/ActionTypes\";\r\n\r\nconst initialState = {\r\n  plan: {\r\n    isLoading: null,\r\n    error: null,\r\n    data: null,\r\n  },\r\n};\r\n\r\nconst planets = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_PLANETS_REQUEST:\r\n      return {\r\n        ...state,\r\n        plan: {\r\n          isLoading: true,\r\n          error: null,\r\n          data: null,\r\n        },\r\n      };\r\n    case GET_PLANETS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        plan: {\r\n          isLoading: false,\r\n          error: false,\r\n          data: action.payload,\r\n        },\r\n      };\r\n    case GET_PLANETS_FAIL:\r\n      return {\r\n        ...state,\r\n        plan: {\r\n          isLoading: false,\r\n          error: action.payload,\r\n          data: false,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default planets;\r\n","import { combineReducers } from \"redux\";\r\nimport planets from \"./planets\";\r\n\r\nexport default combineReducers({\r\n  planets,\r\n});\r\n","import {\r\n  GET_PLANETS_REQUEST,\r\n  GET_PLANETS_SUCCESS,\r\n  GET_PLANETS_FAIL,\r\n} from \"../constants/ActionTypes\";\r\n\r\nimport { getPlanets } from \"../api/planets\";\r\n\r\nconst getPlanet = async (dispatch) => {\r\n  dispatch({ type: GET_PLANETS_REQUEST });\r\n\r\n  try {\r\n    const response = await getPlanets();\r\n    const res = await response.json();\r\n    dispatch({ type: GET_PLANETS_SUCCESS, payload: res });\r\n  } catch (e) {\r\n    dispatch({ type: GET_PLANETS_FAIL, payload: e });\r\n  }\r\n};\r\n\r\nexport const getPlanetFunc = (dispatch) => {\r\n  return () => getPlanet(dispatch);\r\n};\r\n","export const getPlanets = () =>\r\n  fetch(\"https://api.le-systeme-solaire.net/rest/bodies/\");\r\n","import React from \"react\";\r\nimport { Switch, Route, Link, useParams } from \"react-router-dom\";\r\n\r\nconst Planets = ({ planets, getPlanets }) => {\r\n  let b;\r\n  if (planets.plan && planets.plan.data && planets.plan.data.bodies) {\r\n    b = planets.plan.data.bodies.map((i) => <div>{i.name}</div>);\r\n  } else {\r\n    b = <div>No data</div>;\r\n  }\r\n  let { id } = useParams();\r\n  console.log(id);\r\n  return (\r\n    <div>\r\n      <h3>Planets</h3>\r\n      <button onClick={getPlanets}>Planets</button>\r\n      {b}\r\n    </div>\r\n  );\r\n};\r\nexport default Planets;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getPlanetFunc, getPostByIdFunc } from \"../actions/planets\";\r\nimport { planets } from \"../reducers\";\r\nimport Planets from \"../components/Planets\";\r\n\r\nconst PlanetsContainer = ({ planets, getPlanets }) => (\r\n  <Planets planets={planets} getPlanets={getPlanets} />\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  planets: state.planets,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getPlanets: getPlanetFunc(dispatch),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlanetsContainer);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport PlanetsContainer from \"../../containers/PlanetsContainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PlanetsContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// import React, { Component } from \"react\";\r\n\r\n// export default class Planets extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       items: [],\r\n//       isLoaded: false,\r\n//     };\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     fetch(`https://api.le-systeme-solaire.net/rest/bodies`, {\r\n//       mode: \"no-cors\",\r\n//     })\r\n//       .then((response) => response.json())\r\n//       .then((json) => {\r\n//         this.setState({\r\n//           isLoaded: true,\r\n//           items: json.api_products,\r\n//         });\r\n//       });\r\n//   }\r\n\r\n//   render() {\r\n//     let { isLoaded, items } = this.state;\r\n\r\n//     if (!isLoaded) {\r\n//       return <div>Loading... </div>;\r\n//     } else {\r\n//       return (\r\n//         <ul>\r\n//           {items.map((item) => (\r\n//             <li key={item.id}>{item.title}</li>\r\n//           ))}\r\n//         </ul>\r\n//       );\r\n//     }\r\n//   }\r\n// }\r\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducers\";\n// import { getAllProducts } from \"./actions\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst middleware = [thunk];\nif (process.env.NODE_ENV !== \"production\") {\n  middleware.push(createLogger());\n}\n\nconst store = createStore(reducer, applyMiddleware(...middleware));\n\n//store.dispatch(getAllProducts())\n\nrender(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}